// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Track {
    id    Int    @id @default(autoincrement())
    title String
    filePath String @unique

    fileId Int?
    file File? @relation(fields: [fileId], references: [id], onDelete: SetNull)

    artists ArtistTrack[]
    albums  TrackAlbum[]
}

model Artist {
    id   Int    @id @default(autoincrement())
    name String

    tracks ArtistTrack[]
    albums ArtistAlbum[]
}

model Album {
    id   Int    @id @default(autoincrement())
    title String

    tracks  TrackAlbum[]
    artists ArtistAlbum[]
}

model File {
    id           Int      @id @default(autoincrement())
    filename     String   @unique  
    path         String   @unique
    mimeType     String
    size         Int
    uploadedAt   DateTime @default(now())
    
    tracks       Track[]
}

model ArtistTrack {
    track   Track @relation(fields: [trackId], references: [id], onDelete: Cascade)
    trackId Int

    artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
    artistId Int

    @@id([trackId, artistId])
}

model TrackAlbum {
    track   Track @relation(fields: [trackId], references: [id], onDelete: Cascade)
    trackId Int

    album   Album @relation(fields: [albumId], references: [id], onDelete: Cascade)
    albumId Int

    @@id([trackId, albumId])
}

model ArtistAlbum {
    artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
    artistId Int

    album   Album @relation(fields: [albumId], references: [id], onDelete: Cascade)
    albumId Int

    @@id([artistId, albumId])
}
